#+TITLE:  Provision a local archlinux install
#+AUTHOR: Óscar Nájera

[[https://travis-ci.org/Titan-C/archlinux-ansible][https://travis-ci.org/Titan-C/archlinux-ansible.svg?branch=master]]

After an incident with my personal PC I came to realize how complicated it
was to restore from backup. No work data was lost, I think, but getting my
PC into my work-tool is the hard an tedious part. Since I'm now forced to
do/install everything again, I rather save the configuration like a system
dotfiles. Luckily there exist nowadays configuration managers for this, I
just chose ansible because that is the one I'm most familiar.

This is massively inspired/stolen from
[[https://github.com/pigmonkey/spark]]. It serves as my reference for now. That
repo is very advanced for my use case, but maybe as I evolve in my
configuration I'll understand why such repo is like that, for the moment
mine is a simpler version for my use case.

* Running the playbook
** Cloning the repository
Clone either with the recursive flag or afterwards use
#+BEGIN_SRC shell
git submodule init && git submodule update
#+END_SRC

** Set up the variables
First edit the hosts file to contain the hosts information of the machines to workon

#+BEGIN_SRC shell :tangle hosts
  # hosts to configure see readme.org
  [laptop]
  localhost ansible_connection=local
#+END_SRC

Then edit the variables for that machine in *group_vars/host*

Finally make sure that the *install.yml* playbook will run on the desired host.
** Executing the playbook
Run as user with sudo.
#+BEGIN_SRC sh
ansible-playbook install.yml -i hosts --ask-become-pass
#+END_SRC

Run as root
#+BEGIN_SRC sh
ansible-playbook install.yml -i hosts
#+END_SRC

For a specific tag, e.g. multimedia
#+BEGIN_SRC sh
ansible-playbook install.yml -i hosts --ask-become-pass  --tags=multimedia
#+END_SRC
* Troubleshooting
This might not work in any clean/new machine yet as there are still some
steps that where carried manually when setting up the system. So look
around and try.
* Raspberry
** Change default passwords
The image came with default passwords for root and alarm. Change those.
#+BEGIN_SRC bash
passwd
#+END_SRC
** Install python
#+BEGIN_SRC bash
pacman -S python
#+END_SRC
** Wifi
https://blog.stigok.com/2017/06/05/setting-up-wireless-network-on-a-raspberry-pi-3-with-arch-linux-arm-armv7h.html
put in file /etc/wpa_supplicant/wpa_supplicant-wlan0.conf
#+BEGIN_SRC bash
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=wheel
network={
     ssid="sshowfosho"
     scan_ssid=1
     key_mgmt=WPA-PSK
     psk="yoforeal"
}
#+END_SRC
enable the service
** SSH
#+BEGIN_SRC bash
mkdir ./ssh
chmod 700 .ssh
nano .ssh/authorized_keys
chmod 400 .ssh/authorized_keys
#+END_SRC
put ssh keys on user and root, may need to do it manually
Be sure you can login
* Languages development environments
I somehow feel it is better to have the script to install some dependencies
compared to managing with ansible in the case where I can't install everything
with pacman.
** Nix
#+begin_src bash
curl -L https://nixos.org/nix/install | sh
#+end_src
** Haskell
Just use ghcup https://www.haskell.org/ghcup/
#+begin_src bash
curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | sh
#+end_src
My basic packages
#+begin_src bash
cabal update
cabal install git-annex hledger pandoc ShellCheck
cabal install hlint stylish-haskell stack
#+end_src
* Servers
SSH over root and change password and create user
#+begin_src bash
passwd
useradd --create-home deploy
passwd deploy
# Set the new account for a passwordless `sudo`.
echo 'deploy ALL=(ALL) NOPASSWD: ALL' > /etc/sudoers.d/deploy
#+end_src

#+begin_src bash
ssh-copy-id -f -i ~/path/to/pubkep.pub deploy@server
#+end_src
